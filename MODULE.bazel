###############################################################################
# Bazel now uses Bzlmod by default to manage external dependencies.
# Please consider migrating your external dependencies from WORKSPACE to MODULE.bazel.
#
# For more details, please check https://github.com/bazelbuild/bazel/issues/18958
###############################################################################

# bazel_dep(name = "rules_cuda", version = "0.2.5")

# Choose the most recent version available at
# https://registry.bazel.build/modules/googletest
bazel_dep(name = "googletest", version = "1.17.0")

# Hedron's Compile Commands Extractor for Bazel
# https://github.com/hedronvision/bazel-compile-commands-extractor
# commit: 4f28899228fb3ad0126897876f147ca15026151e
bazel_dep(name = "hedron_compile_commands", dev_dependency = True)
local_path_override(
    module_name = "hedron_compile_commands",
    path = "rules/hedron_compile_commands",
)

# For install build artifacts
# https://github.com/google/bazel_rules_install.git
# commit: 6001facc1a96bafed0e414a529b11c1819f0cdbe
bazel_dep(name = "com_github_google_rules_install")
local_path_override(
    module_name = "com_github_google_rules_install",
    path = "rules/bazel_install_rules",
)

# Add appropriate dependencies and register the toolchain
# This step defines a cc_toolchain and binds it to a toolchain target for the host configuration
bazel_dep(name = "platforms", version = "0.0.11")
register_toolchains(
    "//toolchain:cc_toolchain_for_linux_aarch64_rpi3",
)

# The spdlog pre-built library
# Query this repo info by 'bazel query 'deps(@spdlog)' --output=build'
new_local_repository = use_repo_rule("@bazel_tools//tools/build_defs/repo:local.bzl", "new_local_repository")
new_local_repository(
    name = "spdlog",
    path = "third_party/spdlog/",
    build_file_content = """
cc_library(
    name = "spdlog",
    srcs = glob(["**/*.so*"]),
    hdrs = glob(["**/*.h"]),
    strip_include_prefix = "include",
    visibility = ["//visibility:public"],
)
""",
)
